#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["GridMaterial", "Material", "Rainbow", "PBR_rainbow", "Cube", "Sphere"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/PBR_rainbow> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        float3 xformOp:scale = (1, 0.01, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Material "PBR_rainbow"
    {
        token inputs:frame:stPrimvarName = "st" (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-115.25, 86.5)
                    float2 sizeInSubgraph = (203.5, 53)
                }
            }
        )
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        prepend token outputs:surface.connect = </Root/PBR_rainbow/UsdPreviewSurface.outputs:surface>
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (126.25, 109.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        def Shader "UsdPreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </Root/PBR_rainbow/diffuseColor.outputs:rgb>
            color3f inputs:emissiveColor = (1, 1, 1) (
                colorSpace = "lin_srgb"
            )
            float inputs:opacity = 1
            float inputs:opacity.connect = </Root/PBR_rainbow/opacity.outputs:r>
            float inputs:opacityThreshold
            float inputs:roughness = 1
            token outputs:surface
        }

        def Shader "diffuseColor"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @Materials/rainbow.png@
            float2 inputs:st.connect = </Root/PBR_rainbow/diffuseColor/TexCoordReader.outputs:result>
            color3f outputs:rgb

            def Shader "TexCoordReader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname.connect = </Root/PBR_rainbow/UsdPreviewSurface.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Shader "opacityThreshold"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @Materials/rainbow.png@
            float2 inputs:st.connect = </Root/PBR_rainbow/opacityThreshold/TexCoordReader.outputs:result>
            float outputs:r

            def Shader "TexCoordReader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname.connect = </Root/PBR_rainbow/UsdPreviewSurface.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Shader "opacity"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @Materials/rainbow.png@
            float2 inputs:st.connect = </Root/PBR_rainbow/opacity/TexCoordReader.outputs:result>
            float outputs:r

            def Shader "TexCoordReader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname.connect = </Root/PBR_rainbow/UsdPreviewSurface.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Shader "emissiveColor"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @Materials/rainbow.png@
            float2 inputs:st.connect = </Root/PBR_rainbow/emissiveColor/TexCoordReader.outputs:result>
            color3f outputs:rgb

            def Shader "TexCoordReader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname.connect = </Root/PBR_rainbow/UsdPreviewSurface.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }
    }
}

