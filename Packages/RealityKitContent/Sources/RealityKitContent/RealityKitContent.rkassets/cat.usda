#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    def Cube "plane" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["PBR_rainbow_1", "cat"]
        rel material:binding = </Root/plane/cat> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.045, 6.661339e-18, 0.045)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "cat"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-148.76953, -60.445312)
                        float2 sizeInSubgraph = (204, 53)
                        int stackingOrderInSubgraph = 11
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/plane/cat/UnlitSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/plane/cat/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (109.72656, 195.84375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 143

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1) (
                    colorSpace = "srgb_displayp3"
                )
                color3f inputs:emissiveColor.connect = </Root/plane/cat/emissiveColor.outputs:rgb>
                float inputs:occlusion = 0
                float inputs:opacity.connect = </Root/plane/cat/opacity.outputs:r>
                float inputs:opacityThreshold
                float inputs:roughness = 1
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @Materials/rainbow_3.png@
                float2 inputs:st.connect = </Root/plane/cat/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/plane/cat/UsdPreviewSurface.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "opacityThreshold"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @Materials/rainbow.png@
                float2 inputs:st.connect = </Root/plane/cat/opacityThreshold/TexCoordReader.outputs:result>
                float outputs:r

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/plane/cat/UsdPreviewSurface.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "opacity"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @Materials/rainbow_3_a.png@
                float2 inputs:st.connect = </Root/plane/cat/opacity/TexCoordReader.outputs:result>
                float outputs:r

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/plane/cat/UsdPreviewSurface.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "emissiveColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @Materials/rainbow_3_a.png@
                float2 inputs:st.connect = </Root/plane/cat/emissiveColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/plane/cat/UsdPreviewSurface.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "UnlitSurface"
            {
                uniform token info:id = "ND_realitykit_unlit_surfaceshader"
                bool inputs:applyPostProcessToneMap = 0
                color3f inputs:color.connect = None
                bool inputs:hasPremultipliedAlpha = 0
                float inputs:opacity = 0.9
                float inputs:opacity.connect = </Root/plane/cat/Image.outputs:out>
                float inputs:opacityThreshold
                token outputs:out
                float2 ui:nodegraph:node:pos = (-132.7207, 70.30469)
                float2 ui:nodegraph:node:size = (195, 181)
                int ui:nodegraph:node:stackingOrder = 170
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:opacity", "inputs:opacityThreshold", "inputs:color"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Materials/cat.png@
                string inputs:filtertype = "linear"
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-673.1187, 170.05023)
                float2 ui:nodegraph:node:size = (149, 199)
                int ui:nodegraph:node:stackingOrder = 172
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:file", "inputs:default", "inputs:texcoord", "inputs:uaddressmode"]
            }
        }
    }
}

